#!KAMAILIO
# {{ ansible_managed }}
####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"


#!substdef "!MY_IP_ADDR!{{ ansible_default_ipv4["address"] }}!g"
#!substdef "!MY_DOMAIN!{{ ansible_default_ipv4["address"] }}!g"
#!substdef "!MY_WS_PORT!10080!g"
#!substdef "!MY_WSS_PORT!10443!g"

#!substdef "!MY_WS_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"

#!define WITH_NAT
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define FLT_NATS 5
#!define FLT_OUT 8


####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children={{ ansible_processor_vcpus * 2}}

/* uncomment the next line to disable TCP (default on) */
disable_tcp=no
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
port=9060

listen=MY_IP_ADDR:5090
listen=MY_WS_ADDR
listen=MY_WSS_ADDR

advertised_address=MY_IP_ADDR

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
#!endif
enable_tls=yes
async_workers={{ ansible_processor_vcpus * 2}}

loadmodule "websocket.so"
loadmodule "xhttp.so"

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "sdpops.so"
loadmodule "rtpengine.so"
loadmodule "nathelper.so"
loadmodule "textopsx.so"
loadmodule "tls.so"

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

modparam("corex", "alias_subdomains", "MY_DOMAIN")
modparam("usrloc", "db_mode", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)

# ----- usrloc params -----
/* enable DB persistency for location entries */

#!ifdef WITH_NAT
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 15)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif




# ----- mi_fifo params -----
#modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")

# ----- ctl params -----
#modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")


#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif


modparam("tls", "config", "/etc/kamailio/tls.cfg")

####### Routing Logic ########


request_route {


  // Accept only WebSockets
  if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) && !(proto == WS || proto == WSS))) {
    xlog("L_WARN", "SIP request received on $Rp\n");
    sl_send_reply("403", "Forbidden");
    exit;
  }

  // Initial checks
  route(REQINIT);
  route(NATDETECT);
  if (is_method("CANCEL")) {
    if (t_check_trans()) {
      route(RELAY);
    }
    exit;
  }
  route(WITHINDLG);

  t_check_trans();


  if (!is_method("REGISTER|INVITE|ACK|BYE|CANCEL|PRACK|MESSAGE|INFO|UPDATE")) {
    sl_send_reply("405", "Method not allowed");
    exit;
  }

  # authentication
  route(AUTH);

  # record routing for dialog forming requests (in case they are routed)
  # - remove preloaded route headers
  remove_hf("Route");
  if (is_method("INVITE|SUBSCRIBE"))
    record_route_preset("{{ ansible_default_ipv4["address"] }}:5090;nat=yes");

  # handle registrations
  route(REGISTRAR);

  if ($rU==$null) {
    # request with no Username in RURI
    sl_send_reply("484","Address Incomplete");
    exit;
  }

  if (!is_method("INVITE")) {
    route(RELAY);
    exit;
  }

  // Check if $rU is test and send it to echotest call

  if(is_method("INVITE"))
  {
    if($rU == "test") {
      xlog("L_NOTICE", "Send to echotest");

      //$du = "sip:4151595@157.157.129.24";
      $rU = "{{ sip_user }}";
      rewritehostport("{{ sip_host }}");
      route(RELAY);
      exit;
    }
  }

  route(LOCATION);
}

route[SETUP_BY_TRANSPORT] {

  if ($ru =~ "transport=ws") {
    xlog("L_INFO", "to WS");
    if(sdp_with_transport("RTP/SAVPF")) {
      rtpengine_manage("force trust-address replace-origin replace-session-connection SDES=off ICE=force");
      t_on_reply("REPLY_WS_TO_WS");
      return;
    }
    rtpengine_manage("force trust-address replace-origin replace-session-connection SDES=off ICE=force RTP/SAVPF");
    t_on_reply("REPLY_FROM_WS");
  }
  else if ($proto =~ "ws") {
    xlog("L_INFO", "from WS");
    rtpengine_manage("force trust-address replace-origin replace-session-connection SDES=off ICE=remove RTP/AVP");
    //rtpengine_manage("froc-sp");
    t_on_reply("REPLY_TO_WS");
  }
  else {
    xlog("L_INFO", "SIP");
    rtpengine_manage("replace-origin replace-session-connection");
    t_on_reply("MANAGE_CLASSIC_REPLY");
  }
}

event_route[xhttp:request] {
  set_reply_close();
  set_reply_no_connect();

  if ($Rp != MY_WS_PORT && $Rp != MY_WSS_PORT) {
    xlog("L_WARN", "HTTP request received on $Rp\n");
    xhttp_reply("403", "Forbidden", "", "");
    exit;
  }

  xlog("L_INFO", "HTTP Request Received\n");

  if ($hdr(Upgrade)=~"websocket" && $hdr(Connection)=~"Upgrade" && $rm=~"GET") {
    # Validate Host - make sure the client is using the correct
    # alias for WebSockets
    if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
      xlog("L_WARN", "Bad host $hdr(Host)\n");
      xhttp_reply("403", "Forbidden", "", "");
      exit;
    }

    if (ws_handle_handshake())
    {
      exit;
    }
  }

  xhttp_reply("404", "Not Found", "", "");
}

route[RELAY] {
  if (is_method("INVITE")) {
    route(SETUP_BY_TRANSPORT);
    if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
  }

  if (!t_relay()) {
    sl_reply_error();
  }
  exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
  # flood dection from same IP and traffic ban for a while
  # be sure you exclude checking trusted peers, such as pstn gateways
  # - local host excluded (e.g., loop to self)
  if(src_ip!=myself) {
    if($sht(ipban=>$si)!=$null) {
      # ip is already blocked
      xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
      exit;
    }
    if (!pike_check_req()) {
      xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
      $sht(ipban=>$si) = 1;
      exit;
    }
  }
#!endif

  if (!mf_process_maxfwd_header("10")) {
    sl_send_reply("483","Too Many Hops");
    exit;
  }

  if(!sanity_check("1511", "7")) {
    xlog("Malformed SIP message from $si:$sp\n");
    exit;
  }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
  if (has_totag()) {
    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {

      if ($du == "") {
        if (!handle_ruri_alias()) {
          xlog("L_ERR", "Bad alias <$ru>\n");
          sl_send_reply("400", "Bad Request");
          exit;
        }
      }
#     else
#       route(DLGURI);

      xlog("==> duri=[$du]");

      if ( is_method("ACK") ) {
        # ACK is forwarded statelessy
        route(NATMANAGE);
      }
      route(RELAY);
    } else {
      if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
          # no loose-route, but stateful ACK;
          # must be an ACK after a 487
          # or e.g. 404 from upstream server
          route(RELAY);
          exit;
        } else {
          # ACK without matching transaction ... ignore and discard
          exit;
        }
      }
      sl_send_reply("404","Not here");
    }
    exit;
  }
}

# Handle SIP registrations
route[REGISTRAR] {
  if (is_method("REGISTER")) {
    if(isflagset(FLT_NATS)) {
      setbflag(FLB_NATB);
      # uncomment next line to do SIP NAT pinging
      setbflag(FLB_NATSIPPING);
    }
    if (!save("location"))
      sl_reply_error();

    exit;
  }
}

# USER location service
route[LOCATION] {
  if (!lookup("location")) {
    $var(rc) = $rc;
    t_newtran();
    switch ($var(rc)) {
      case -1:
      case -3:
        send_reply("404", "Not Found $rU");
        exit;
      case -2:
        send_reply("405", "Method Not Allowed");
        exit;
    }
  }

  route(RELAY);
  exit;
}


# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH
  if (is_method("REGISTER") || from_uri==myself) {
    # authenticate requests
    if (!auth_check("$fd", "subscriber", "1")) {
      auth_challenge("$fd", "0");
      exit;
    }
    # user authenticated - remove auth header
    if(!is_method("REGISTER|PUBLISH"))
      consume_credentials();
  }
  # if caller is not local subscriber, then check if it calls
  # a local destination, otherwise deny, not an open relay here
  if (from_uri!=myself && uri!=myself) {
    sl_send_reply("403","Not relaying");
    exit;
  }

#!endif
  return;
}

# Caller NAT detection route
route[NATDETECT] {
  force_rport();
# if (nat_uac_test("64")) {
    if (is_method("REGISTER")) {
      fix_nated_register();
    } else {
      add_contact_alias();
#     fix_nated_contact();
    }
    setflag(FLT_NATS);
# }
  return;
}

# rtpengine control
route[NATMANAGE] {
  if (is_request()) {
    if(has_totag()) {
      if(check_route_param("nat=yes")) {
        setbflag(FLB_NATB);
      }
    }
  }


  if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
    return;

  if (is_request()) {
    if (!has_totag()) {
      if(t_is_branch_route()) {
        add_rr_param(";nat=yes");
      }
    }
  }
  if (is_reply()) {
    if(isbflagset(FLB_NATB)) {
      add_contact_alias();
    }
  }
}

# URI update for dialog requests
route[DLGURI] {
  if(!isdsturiset()) {
    handle_ruri_alias();
  }
  return;
}

onreply_route[REPLY_TO_WS] {

  xlog("L_INFO", "Reply from softphone: $rs");

  if (t_check_status("183")) {
    change_reply_status("180", "Ringing");
    remove_body();
    exit;
  }

  if(!(status=~"[12][0-9][0-9]"))
    return;

  rtpengine_manage("force trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF");

  route(NATMANAGE);
}

onreply_route[REPLY_FROM_WS] {

  xlog("L_INFO", "Reply from webrtc client: $rs");

  if(status=~"[12][0-9][0-9]") {
    rtpengine_manage("force trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
    route(NATMANAGE);
  }
}

onreply_route[MANAGE_CLASSIC_REPLY] {
  xlog("L_INFO", "Boring reply from softphone: $rs");

  if(status=~"[12][0-9][0-9]") {
    rtpengine_manage("replace-origin replace-session-connection");
    route(NATMANAGE);
  }
}

onreply_route[REPLY_WS_TO_WS] {
  xlog("L_INFO", "WS to WS");
  if(status=~"[12][0-9][0-9]") {
    rtpengine_manage("force trust-address replace-origin replace-session-connection ICE=force");
    route(NATMANAGE);
  }
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
  route(NATMANAGE);

  if (t_is_canceled()) {
    exit;
  }
}
